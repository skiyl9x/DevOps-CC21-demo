name: Deploy on staging

on:
 
  push:
    branches:
      - 'deploy'
    paths:
       - 'k8s/**'

  workflow_run:
    workflows: [buid-app-CI]
    types: [completed]
    branches: [dev]
  workflow_dispatch:
    
env:
  AWS_REGION: us-east-2

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
      
    - name: Deploy nginx+php-fpm to staging
      uses: koslib/helm-eks-action@master
      env:
            KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STAGING }}
      with:
          command: kubectl apply -f k8s
        
    - name: Waiting run pods
      run: sleep 1
      
    - name: Deploy nginx+php-fpm status
      uses: koslib/helm-eks-action@master
      env:
            KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STAGING }}
      with:
        command: kubectl get deploy --namespace=lemp --output name | xargs -n1 -t kubectl rollout status --namespace=lemp
    
    - name: Deploying mysql
      uses: koslib/helm-eks-action@master
      env:
            KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STAGING }}
      with:
          command: kubectl apply -f k8s/mysql/

    - name: Check mysql deploying
      uses: koslib/helm-eks-action@master
      env:
            KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STAGING }}
            NAMESPACE_app: database
      with:
          command: kubectl -n $NAMESPACE_app rollout status statefulset/mysql-set

    - name: Update credentials
      uses: koslib/helm-eks-action@master
      env:
            KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STAGING }}
            NAMESPACE_app: database
      with:
          command: |
                  kubectl apply -f vault/mysql-config.yml
                  sleep 10
                  logs=`kubectl logs --namespace=$NAMESPACE_app mysql-configuration mysql-container`
                  if [ "$logs" = "Information in MySQL DB has changed. Congrats!" ]
                  then
                    echo $logs
                    kubectl delete -f mysql-config.yml
                  else
                    echo $logs
                    kubectl delete -f mysql-config.yml
                    exit 2
                  fi

    - name: Upload database
      uses: koslib/helm-eks-action@master
      env:
            KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STAGING }}
            NAMESPACE_app: database
      with:
          command: |
                  kubectl -f vault/mysql-upload.yml
                  sleep 10
                  logs=`kubectl logs --namespace=$NAMESPACE_app mysql-upload mysql-container`
                  if [ "$logs" = "mysql-dump has been imported succesfully!" ]
                  then
                    echo $logs
                    kubectl delete -f mysql-config.yml
                  else
                    echo $logs
                    kubectl delete -f mysql-config.yml
                    exit 2
                  fi
    
  upload-files:
    name: Upload files
    needs: deploy
    runs-on: ubuntu-latest
    environment: staging

    steps:
    
    - uses: actions/checkout@v2
      with:
       ref: dev
     
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Copy site data from dev branch
      uses: koslib/helm-eks-action@master
      env:
            KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_STAGING }}
      with:
          command: |
                  pod_name=`kubectl get pod --namespace=lemp -l run=nginx -o jsonpath="{.items[0].metadata.name}"` && \
                  kubectl cp data/site lemp/$pod_name:/ && \
                  kubectl exec -i  --namespace=lemp $pod_name -- chown -R www-data:www-data /site
